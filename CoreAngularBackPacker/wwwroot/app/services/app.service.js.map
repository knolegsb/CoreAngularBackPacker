{"version":3,"sources":["services/app.service.ts"],"names":["AppService","http","this","loungeBaseUrl","placeBaseUrl","prototype","getLatestDiscussion","num","url","get","map","response","json","catch","handleError","getDiscussion","id","Error","getLatestEntries","getMostViewed","getPlace","error","console","Rx_1","Observable","throw","__decorate","core_1","Injectable","exports_1"],"mappings":"o4BAMAA,WAAA,WACI,QAAAA,YAAoBC,MAAAC,KAAAD,KAAAA,KAGZC,KAAAC,cAAgB,cAChBD,KAAAE,aAAe,aA8C3B,MA5CIJ,YAAAK,UAAAC,oBAAA,SAAoBC,KAChB,GAAIC,KAAMN,KAAKC,cAAgB,sBAE/B,OADW,OAAPI,MAAaC,KAAOD,KACjBL,KAAKD,KAAKQ,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMX,KAAKY,cAGpBd,WAAAK,UAAAU,cAAA,SAAcC,IACV,GAAU,MAANA,GAAY,KAAM,IAAIC,OAAM,kBAChC,IAAIT,KAAMN,KAAKC,cAAgBa,EAC/B,OAAOd,MAAKD,KAAKQ,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAQA,UAASC,SACjCC,MAAMX,KAAKY,cAGpBd,WAAAK,UAAAa,iBAAA,SAAiBX,KACb,GAAIC,KAAMN,KAAKE,aAAe,mBAE9B,OADW,OAAPG,MAAaC,KAAOD,KACjBL,KAAKD,KAAKQ,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMX,KAAKY,cAGpBd,WAAAK,UAAAc,cAAA,SAAcZ,KACV,GAAIC,KAAMN,KAAKE,aAAe,gBAE9B,OADW,OAAPG,MAAaC,KAAOD,KACjBL,KAAKD,KAAKQ,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMX,KAAKY,cAGpBd,WAAAK,UAAAe,SAAA,SAASJ,IACL,GAAU,MAANA,GAAY,KAAM,IAAIC,OAAM,kBAChC,IAAIT,KAAMN,KAAKE,aAAeY,EAC9B,OAAOd,MAAKD,KAAKQ,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAQA,UAASC,SACjCC,MAAMX,KAAKY,cAGZd,WAAAK,UAAAS,YAAR,SAAoBO,OAEhB,MADAC,SAAQD,MAAMA,OACPE,KAAAC,WAAWC,MAAMJ,MAAMT,OAAOS,OAAS,iBAlDtDrB,WAAA0B,YAACC,OAAAC,2EACDC,UAAA,aAAA7B","file":"app.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Http, Response } from \"@angular/http\";\r\nimport { Lounge } from \"../viewmodels/lounge\";\r\nimport { Observable } from \"rxjs/Rx\";\r\n\r\n@Injectable()\r\nexport class AppService {\r\n    constructor(private http: Http) { }\r\n\r\n    // URL to web api\r\n    private loungeBaseUrl = 'api/lounge/';\r\n    private placeBaseUrl = 'api/place/';\r\n\r\n    getLatestDiscussion(num?: number) {\r\n        var url = this.loungeBaseUrl + \"GetLatestDiscussion/\";\r\n        if (num != null) url += num;\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    getDiscussion(id: number) {\r\n        if (id == null) throw new Error(\"id is required.\");\r\n        var url = this.loungeBaseUrl + id;\r\n        return this.http.get(url)\r\n            .map(response => <Lounge>response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    getLatestEntries(num?: number) {\r\n        var url = this.placeBaseUrl + \"GetLatestEntries/\";\r\n        if (num != null) url += num;\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    getMostViewed(num?: number) {\r\n        var url = this.placeBaseUrl + \"GetMostViewed/\";\r\n        if (num != null) url += num;\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    getPlace(id: number) {\r\n        if (id == null) throw new Error(\"id is required.\");\r\n        var url = this.placeBaseUrl + id;\r\n        return this.http.get(url)\r\n            .map(response => <Lounge>response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    private handleError(error: Response) {\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || \"Server error\");\r\n    }\r\n}\r\n"]}